# Copyright 2016 Alex Griffin.  See LICENSE file for details.

# This is the default implementation of the `package` function. You should not
# normally override this function. Instead, you should override the individual
# phases that it calls.
package() {
	prefix="$STEWPREFIX"
	builddir="${TMPDIR:-/tmp}/stew.$$.$name-build"
	cachedir="${XDG_CACHE_HOME:-$HOME/.cache}/stew/${name}${version:+-$version}"
	mandir="$pkgdir/share/man"

	for phase in depends download setup unpack patch configure build \
		test install cleanup stow; do

		for subphase in "pre${phase}" "${phase}" "post${phase}"; do
			if type "${subphase}_phase" >/dev/null 2>&1; then
				"${subphase}_phase"
			fi
		done
		unset subphase
	done
	unset phase
}

depends_phase() {
	for stewdep in $depends; do
		stew "$stewdep"
	done
	unset stewdep

	for aptdep in $aptdepends; do
		if ! deb_is_installed "$aptdep"; then
			sudo apt install $aptdepends
			break
		fi
	done
	unset aptdep
}

deb_is_installed() {
	if type dpkg >/dev/null 2>&1; then
		dpkg -s "$1" >/dev/null 2>&1
	fi
}

nfields() {
	echo $#
}

field() {
	n=$1
	shift

	j=1
	for arg in $*; do
		if test $j -eq $n; then
			echo $arg
			break
		fi
		j=$((j + 1))
	done

	unset arg
	unset j
	unset n
}

download_phase() {
	if test $(nfields $source) -ne $(nfields $sum); then
		error 3 "$name:" 'len($source) != len($sum)'
	fi

	mkdir -p "$cachedir"
	cd "$cachedir"
	for i in $(seq $(nfields $source)); do
		fetch $(field "$i" $source)
		if ! verify_sum $(destname $(field "$i" $source)) $(field "$i" $sum); then
			error 3 "could not verify integrity of file $(destname "$(field "$i" $source)")"
		fi
	done
	unset i

	for repo in $gitrepo; do
		reponame="${repo%@*}"
		repobase=$(basename "$reponame" .git)
		reporev="${repo##*@}"
		git clone "$reponame" || true
		cd "$repobase"
		if test "$reporev" != "$reponame"; then
			git checkout "$reporev"
		else
			git pull
		fi
		cd ..
	done
	unset repo
}

fetch() {
	src="${1%>*}"
	dest=$(destname "$1")
	if ! test -f "$dest"; then
		echo "fetching $dest" >&2
		curl -L "$src" >"$dest"
	fi
	unset src dest
}

destname() {
	dest="${1##*/}"
	dest="${dest##*>}"
	if test -f "$STEWPKGS/$dest"; then
		echo "$STEWPKGS/$dest"
	else
		echo "$dest"
	fi
	unset dest
}

# `verify_sum file sum` returns null (a.k.a. true) only if file matches sum
verify_sum() {
	case "$2" in
	????????????????????????????????)
		test $(md5sum "$1" | cut -d ' ' -f 1) = "$2"
		;;
	????????????????????????????????????????)
		test $(sha1sum "$1" | cut -d ' ' -f 1) = "$2"
		;;
	????????????????????????????????????????????????????????????????)
		test $(sha256sum "$1" | cut -d ' ' -f 1) = "$2"
		;;
	????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????)
		test $(sha512sum "$1" | cut -d ' ' -f 1) = "$2"
		;;
	esac
}

setup_phase() {
	# work in temporary directory
	mkdir "$builddir"
	for file in $source; do
		cp $(destname "$file") "$builddir"
	done
	unset file

	for repo in $gitrepo; do
		gitpath=$(basename "${repo%@*}" .git)
		mkdir -p "$builddir/$gitpath"
		git -C "$gitpath" archive HEAD | tar -x -C "$builddir/$gitpath"
		unset gitpath
	done
	unset repo

	cd "$builddir"

	# set build flags
	if type dpkg-buildflags >/dev/null 2>&1; then
		eval $(dpkg-buildflags --export=sh)
	fi

	export CPATH="$prefix/include"
	export LD_RUN_PATH="$prefix/lib"
	export LDFLAGS="$LDFLAGS -L$prefix/lib"
	export PKG_CONFIG_PATH="$prefix/lib/pkgconfig"
}

unpack_phase() {
	for file in $source; do
		case "$file" in
		*.tar | *.tar.[gx]z | *.tar.bz2 | *.t[bgx]z | *.tb2 | *.tbz2 | *.zip | *.7z)
			extract $(destname "$file")
			;;
		esac
	done
	unset file

	for dir in */; do
		test -d "$dir" && cd "$dir" || true
		return
	done
	unset dir
}

extract() {
	case "$1" in
	*.tar)
		tar x <"$1"
		;;
	*.tar.bz2 | *.tb2 | *.tbz | *.tbz2)
		bunzip2 <"$1" | tar x
		;;
	*.tar.gz | *.tgz)
		gunzip <"$1" | tar x
		;;
	*.tar.xz | *.txz)
		unxz <"$1" | tar x
		;;
	*.zip)
		unzip "$1"
		;;
	*.7z)
		7z x "$1"
		;;
	esac
}

configure_phase() {
	if test -x configure; then
		./configure --prefix="$pkgdir"
	fi
}

build_phase() {
	if test -f makefile -o -f Makefile -o -f GNUmakefile; then
		make
	fi
}

install_phase() {
	if test -f makefile -o -f Makefile -o -f GNUmakefile; then
		autosudo make PREFIX="$pkgdir" install
	fi
}

cleanup_phase() {
	cd
	case "$builddir" in
	"${TMPDIR:-/tmp}/stew.$$.$name-build")
		rm -rf "$builddir"
		;;
	esac
}

# calls sudo unless prefix is in /home
autosudo() {
	case "$prefix" in
	/home/*)
		"$@"
		;;
	*)
		sudo "$@"
		;;
	esac
}

stow_phase() {
	# autosudo chmod -R a-w $prefix/stow/$name-$version
	autosudo stow -d "$prefix/stow" "$name${version:+-$version}"
}

# shorten a git revision for use in a version number
gitver() {
	echo "$1" | head -c7
}
