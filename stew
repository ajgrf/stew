#!/bin/mksh
set -e

# Stew is a simple package manager for installing software outside of your
# distribution's repositories. It leverages the excellent GNU Stow utility to
# manage packages, but alleviates much of the boilerplate you might otherwise
# need to write if you wanted to automate your stow installations.

# configuration
prefix="$HOME/.local"
pkgpath="$HOME/src/stew/pkgs"

stowdir="$prefix/stow"

main() {
	if test -f "$pkgpath/$1.pkg.sh"; then
		(
			name="$1"
			pkgdir="$stowdir/$name"
			. "$pkgpath/$1.pkg.sh"

			# include $version in $pkgdir if it's defined
			if test "$version"; then
				pkgdir="$stowdir/$name-$version"
			fi

			# finally run the package function
			if ! test -d "$pkgdir"; then
				package
			fi
		)
	fi
}

# exit codes:
# 2 usage error
# 3 packaging error
error() {
	local code="$1"
	shift
	echo stew: "$@" >&2
	exit "$code"
}

# A stew package is a shell script with the following properties:
#
#   * lives in a file named $name.pkg.sh in a directory in $pkgpath
#   * consists only of function and variable definitions (when run or sourced
#     it does nothing on its own)
#   * defines a `package` function which installs the software into $pkgdir
#     and runs stow on it 
#   * inherits a default implementation and helper functions from this file

# This is the default implementation of the `package` function. You should not
# normally override this function. Instead, you should override the individual
# phases that it calls.
package() {
	download_phase
	setup_phase
	unpack_phase
	configure_phase
	build_phase
	install_phase
	cleanup_phase
	stow_phase
}

download_phase() {
	if test ${#source[@]} -ne ${#cksum[@]}; then
		error 3 "$name:" 'len($source) != len($cksum)'
	fi

	for i in ${!source[@]}; do
		fetch "${source[$i]}"
		if ! verify_cksum $(basename "${source[$i]}") "${cksum[$i]}"; then
			error 3 "could not verify integrity of file $(basename "${source[$i]}")"
		fi
	done
}

fetch() {
	if ! test -f $(basename "$1"); then
		curl -O -L "$1"
	fi
}

# `verify_cksum file sum` returns null (a.k.a. true) only if file matches sum
verify_cksum() {
	local hashlen sum
	hashlen=$(echo -n "$2" | wc -c)

	case "$hashlen" in
	32)
		sum=$(md5sum "$1" | cut -d ' ' -f 1) ;;
	40)
		sum=$(sha1sum "$1" | cut -d ' ' -f 1) ;;
	64)
		sum=$(sha256sum "$1" | cut -d ' ' -f 1) ;;
	128)
		sum=$(sha512sum "$1" | cut -d ' ' -f 1) ;;
	esac

	test "$sum" = "$2"
}

setup_phase() {
	# set build flags
	eval "$(dpkg-buildflags --export=sh)"

	export LD_RUN_PATH="$prefix/lib"
	export PKG_CONFIG_PATH="$prefix/lib/pkgconfig"

	# work in temporary directory
	if test -z "$TMPDIR"; then
		TMPDIR="/tmp"
	fi
	builddir="$TMPDIR/stew.$$.$name-build"
	mkdir "$builddir"
	for file in "${source[@]}"; do
		cp "$(basename "$file")" "$builddir"
	done
	cd "$builddir"
}

unpack_phase() {
	for file in "${source[@]}"; do
		case "$file" in
		*.tar|*.tar.[gx]z|*.tar.bz2|*.t[bgx]z|*.tb2|*.tbz2|*.zip|*.7z)
			extract "$(basename "$file")"
		esac
	done

	for dir in */; do
		test -d "$dir" && cd "$dir" || true
		return
	done
}

extract() {
	case "$1" in
	*.tar)
		tar x < "$1" ;;
	*.tar.bz2|*.tb2|*.tbz|*.tbz2)
		bunzip2 < "$1" | tar x ;;
	*.tar.gz|*.tgz)
		gunzip < "$1" | tar x ;;
	*.tar.xz|*.txz)
		unxz < "$1" | tar x ;;
	*.zip)
		unzip "$1" ;;
	*.7z)
		7z x "$1" ;;
	esac
}

configure_phase() {
	# include suckless-style config.h file
	if test -f "../$name.config.h"; then
		cp "../$name.config.h" config.h
	fi

	if test -x configure; then
		if test ${#configureflags[@]} -eq 0; then
			configureflags=("--prefix=${prefix}")
		fi
		./configure "${configureflags[@]}"
	fi
}

build_phase() {
	if test -f makefile -o -f Makefile -o -f GNUmakefile; then
		make
	fi
}

install_phase() {
	if test -f makefile -o -f Makefile -o -f GNUmakefile; then
		autosudo make PREFIX="$pkgdir" install
	fi

	if find . -name '*.[to]t[fc]' | grep -q ''; then
		mkdir -p "$pkgdir/share/fonts"
		find . -name '*.[to]t[fc]' -print0 | xargs -0 cp -t "$pkgdir/share/fonts"
	fi
}

cleanup_phase() {
	cd
	case "$builddir" in
	"${TMPDIR:-/tmp}/stew.$$.$name-build")
		rm -rf "$builddir"
		;;
	esac
}

# calls sudo unless prefix is in /home
autosudo() {
	case "$prefix" in
	/home/*)
		"$@"
		;;
	*)
		sudo "$@"
		;;
	esac
}

stow_phase() {
	# autosudo chmod -R a-w $stowdir/$name-$version
	autosudo stow -d "$stowdir" "$name-$version"
}

main "$@"
